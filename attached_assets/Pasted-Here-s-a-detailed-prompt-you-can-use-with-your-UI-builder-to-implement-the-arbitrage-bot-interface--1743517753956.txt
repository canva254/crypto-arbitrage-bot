Here's a detailed prompt you can use with your UI builder to implement the arbitrage bot interface:

UI Design Prompt for Crypto Arbitrage Bot

Objective:
Create a professional, real-time dashboard for monitoring and controlling a cross-exchange arbitrage bot with advanced trading features and blockchain integration.
1. Core Sections
A. Live Dashboard (Primary View)

    Price Matrix Grid

        Columns: Exchanges (Binance, Coinbase, Uniswap, etc.)

        Rows: Assets (BTC, ETH, SOL, etc.)

        Cells: Bid/Ask prices with color-coded spreads (green = profitable)

    Opportunity Feed

        Cards showing:
    tsx
    Copy

    {
      pair: "BTC/USDT",
      type: "CEX-DEX Arbitrage",
      profit: 2.15%,
      expiration: "15s", // Time until opportunity expires
      exchanges: ["Binance â†’ Uniswap"]
    }

        Quick action: "Execute Trade" button per opportunity

    Network Status Panel

        Node connection indicators (RPC health)

        Exchange API latency metrics

        Blockchain confirmation times

B. Control Panel (Sidebar)

    Bot Controls

        Large start/stop toggle with emergency stop

        Pause/resume with duration selector

    Strategy Configurator
    tsx
    Copy

    <StrategySelector 
      options={["Spatial", "Triangular", "Cross-Chain"]}
      riskLevel={3} // 1-5 scale
    />

    Risk Management

        Interactive sliders for:
    tsx
    Copy

    minProfit: 0.5% - 5%,
    maxSlippage: 0.1% - 3%,
    tradeSize: $10 - $10,000

C. Historical Analytics

    Performance Charts

        Profit/loss timeline (1H/24H/7D/1M)

        Fee accumulation vs. profit comparison

    Trade History Table
    tsx
    Copy

    columns: ["Timestamp", "Pair", "Type", "Profit", "Status"]
    filters: Successful/Failed trades, Asset filter

2. Advanced Features

    Visualization Overlay
    tsx
    Copy

    <ArbPathVisualizer 
      paths={[
        { from: "Binance", to: "Uniswap", asset: "ETH" },
        { from: "Kraken", to: "PancakeSwap", asset: "BNB" }
      ]}
    />

    Liquidity Heatmap

        Layer over DEX pair prices showing pool depth

        Toggle: Show/hide low-liquidity pairs

    MEV Protection Suite

        Switch: "Enable Flashbots Private Transactions"

        Gas auction controls: Max priority fee selector

3. Styling & UX Requirements

    Theme: Dark mode with crypto-native palette

        Primary colors: Ethereum purple (#6F7CBA), Bitcoin orange (#F7931A)

        Alert colors: Profit green (#16C784), Loss red (#EA3943)

    Responsive Design

        Grid layout that collapses to mobile view

        Priority: Desktop-first but mobile-optimized

    Animations

        Pulse effects on new opportunities

        Smooth price update transitions

4. Technical Integration

    Data Sources:
    tsx
    Copy

    websockets: CCXT/Web3 price feeds,
    REST API: Historical trade data

    UI Framework:
    tsx
    Copy

    React + TypeScript,
    State management: Redux Toolkit,
    Charts: Recharts/ApexCharts

Optional Add-Ons:

    Role-based access control (Admin/Trader/Viewer)

    Audit log export (CSV/PDF)

    Mobile app companion view

Deliverables:

    Figma/Adobe XD prototype with interactive components

    React component hierarchy diagram

    Responsive HTML/CSS template with dummy data

This prompt provides clear direction for a UI designer/developer while leaving room for creative interpretation.